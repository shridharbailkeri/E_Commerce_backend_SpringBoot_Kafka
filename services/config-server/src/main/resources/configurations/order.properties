server.port=8070
spring.datasource.url=jdbc:mysql://localhost:3306/ordermic_db?useSSL=false

spring.datasource.username=hbstudent
spring.datasource.password=hbstudent


spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect


# none, create-only, drop, create, create-drop, validate, update
# tells hibernate to create database tables if they dont exist , if tables are already presnt then update them as per jpa entity mapping
spring.jpa.hibernate.ddl-auto = update

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true


# each micro service will register to eureka server, so there are 2 options whether to fetch info or microservice url from
# eureka server or using api gateway , why we should not use address and port of microservice
# for scaling the application if we have high demand on customer service we can scale it up to 3 or 4 or 5 instances at the same time
# so now customer will have multiple instances with different port , port can also be randomly generated
# you will have no idea which port to connect to our customer microservice , this applies to all other micro service
# so better to reach micro service through api gateway since it also contains a load balancer so it will know all the instances
# of a specific microservice , order will connect to api gateway as it is public url and then api gateway will redirect the request
# to the microservice
# this file is one of the configuration file and like this all configuration files will inherit from application.properties file above in config-server
application.config.customer-url=http://localhost:8222/api/v1/customer
application.config.payment-url=http://localhost:8222/api/v1/payment
application.config.product-url=http://localhost:8222/api/v1/products

# Kafka producer configuration
spring.kafka.producer.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
# Additional producer properties
spring.kafka.producer.properties.spring.json.type.mapping=orderConfirmation:com.alibou.ecommerce.kafka.OrderConfirmation